1.
    void recursion(int n)
    {
        double x = 2 * 3;
        x = x * 3;
 
        if (n > 0) {
            recursion(n/2);
        }
    }
    T(100)=105
    Each function call should take about 15 cycles and there should be 7 of them
2.
    void recursion(int n)
    {
        double x = 2 * 3;
        x = x * 3;
 
        if (n > 0) {
            recursion(n/2);
            recursion(n/2);
        }
    }
    T(100)=3000
    The function should be called 2^(log2(n)+1)-1=255 times at about 24 cycles each.
3.
    void recursion(int n)
    {
        double x = 2 * 3;
        x = x * 3;
 
        if (n > 0) {
            recursion(n/2);
            recursion(n/2);
            recursion(n/2);
        }
    }
    T(100)=32800
    The branching factor is 3 so (3^(log2(n)+1)-1)/2=3280 function calls at 10 cycles each
4.
    void recursion(int n)
    {
        double x = 2 * 3;
        x = x * 3;
 
        if (n > 0) {
            recursion(n/2);
            recursion(n/2);
            recursion(n/2);
            recursion(n/2);
        }
    }
    T(100)=283,985
    The branching factor is 4 and the so (4^8-1)/3 is the number of function calls
    at 13 cycles per call
5.
    void recursion(int n)
    {
        double x = 2 * 3;
        x = x * 3;
 
        if (n > 0) {
            recursion(n/3);
        }
    }
    T(100)=112
    This one does not branch but does use division rather than bit shift so there
    are 4 calls at about 28 cycles each
6.
    void recursion(int n)
    {
        double x = 2 * 3;
        x = x * 3;
 
        if (n > 0) {
            recursion(n/3);
            recursion(n/3);
        }
    }
    T(100)=837
    branching factor of 2, depth of 4, 2^5-1 calls 27 cycles per call
7.
    void recursion(int n)
    {
        double x = 2 * 3;
        x = x * 3;
 
        if (n > 0) {
            recursion(n/3);
            recursion(n/3);
            recursion(n/3);
        }
    }
    T(100)=3025
    branching factor of 3, depth of 4, 25 cycles per call
    (3^5-1)/2=121
8.
    void recursion(int n)
    {
        double x = 2 * 3;
        x = x * 3;
 
        if (n > 0) {
            recursion(n/3);
            recursion(n/3);
            recursion(n/3);
            recursion(n/3);
        }
    }
    T(100)=41000
    branching factor of 4 depth of 5, 30 cycles per call
    (4^6-1)/3=1365