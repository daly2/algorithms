1.
    for ( int i = 0; i <= n; ++i ) {
       x = 2+3;
    };
    Because there is one addition (i++), one memory access, one jump, and one comparison (i<=n),
    I estimate this program will take 4 cycles per iteration and will iterate 101 times.
    When initialization is taken into account the overall runtime should be about 450 cycles.
2.
    for ( int i = 0; i >= n; ++i ) {
        x = 2+3;
    };
    one addition, one comparison, one jump, one integer move
    1+1+1+1=4 cycles per iteration
    However the loop is never entered, because the condition i>=n is never true
    Therefore the total runtime is about 5 cycles, for initialization.
3.
    for ( int i = 0; i <= n; ++i ) {
        for ( int j = 0; j <= n/2; ++j ) {
            x = sin(.32);
        }
    };
    The sin calculation takes 50 cycles, and then is saved in a register.
    Is 1, comparison is 1, and jump is 2,
    The runtime of the inner loop should be about 4 and iterates 50 times so total is 200.
    The outer loop contains the inner loop, a memory access an addition and a jump.
    therefore each iteration is about 206 cycles
    The outer loop iterates 101 times therefore it should take about 20,806 cycles overall
4.
    for ( int i = 0; i <= n; ++i ) {
        for ( int j = 0; j <= i; ++j ) {
            x = 32*sin(.32);
        }
    };
    The sin calculation takes 50 cycles and is saved in a register.
    The inner loop has 1 addition, one jump, and one memory access for 5 cycles per iteration
    The inner loop runs for an average of n/2 per iteration of the outer loop so 50 iterations 250 cycles
    The outer loop has an integer addition, one jump and the inner loop so it is about 254 cycles
    The outer loop runs for 101 iterations for a total cycle count of about 27,000 cycles
5.
    for ( int i = 0; i <= n; ++i ) {
        for ( int j = i; j <= n; ++j ) {
            x = 38 + 29*(348*tan(.328));
        }
    };
    The caluclation of x is done once, and threrefore is insignificant to the total runtime.
    The inner loop has one addition one memeroy access and one jump for a total of 5 cycles
    the inner loop runs for an average of 50 iterations / 250 cycles per outer loop
    The outer loop contains the inner loop, a jump, and an addition, for 253 cycles per iteration
    The outer loop iterates 101 times for a total of about 27000 cycles.
6.
    for ( int i = 0; i <= n; ++i ) {
        for ( int j = 0; j <= i/2; ++j ) {
            x = 2398 * 2948 + 3498 * 3948 + 39843 * atan2(32,49);
        }
        i = i + 2;
    };
    The calculation for x is done once and stored so it is insignificant
    Inner loop has 1 memory access, 1 int addition, and one jump 
    Inner loop 5 cycles per iteration, 50 iterations on average, 250 cycles
    Outer loop 2 memory access, one integer division, inner loop, one jump
    outer loop 250+7+60+2=319 cycles per iteration, 101 iterations, 31900 cycles
7.
    for ( int i = 0; i <= n; ++i ) {
        for ( int j = 0; j <= i/2; ++j ) {
            i = i + 1;
        }
    };
    i gets to 125, j gets to 76
    Inner loop has 

    Tested at 1392 cycles
8.
    for ( int i = 0; i <= n; ++i ) {
        for ( int j = 0; j <= i/2; ++j ) {
            i = i + 2;
        }
    };
    This is an infinite loop, and therefore has infinite runtime
9.
    for ( int i = 0; i <= n; ++i ) {
        for ( int j = 0; j <= i; ++j ) {
            for ( int k = 0; k <= j; ++k ) {
                x = x + 5;
            }
        }
    };
    k loop has 2 add, 2 memory access, and 1 jump for 9 cycles per iteration
    k loop runs an average of 25 times per run of j loop for 225 cycles 
    j loop has 1 add, 1 memory access, 1 jump, and k loop for 232 cycles per iteration
    j loop iterates an average of 50 times per iteration of i loop for 11,600 cycles
    i loop has 1 add, 1 memory access, 1 jump and j loop for 11610 cycles
    i loop iterates 101 times for a total runtime of about 1,200,000 cycles.
10.
    for ( int i = 0; i <= n; ++i ) {
        for ( int j = 0; j <= i; ++j ) {
            for ( int k = 0; k <= j; ++k ) {
                k = k*2;
            }
        }
    };
    k loop has 1 multiplication, 1 add, 1 jump, and 1 comparison for 9 cycles per iteration
    k loop iterates 4 times on average for 28 cycles
    j loop has 1 add, 1 jump, 1 memeroy access, and k loop for 32 cycles per iteration
    j loop iterates 50 times on average for 160 cycles
    i loop has 2 memory accesses, 1 add, 1 jump, and j loop for 170 cycles per iteration
    i loop iterates 101 times for a total of about 17,170 cycles.
11.
    for ( int i = 0; i <= n; ++i ) {
        for ( int j = 0; j <= i; ++j ) {
            for ( int k = 0; k <= j; ++k ) {
                j += k;
            }
        }
    };
    This is an infinite loop, and therefore has infinite runtime.
