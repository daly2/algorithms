1.
void recursion(int n)
{
  double x = 2 * 3;
  x = x * 3;
 
  if (n > 0) {
    recursion(n/2);
  }
}
log_(2)*10
log_2(n) function calls and about 10 cycles per call because the values are stored

2.
void recursion(int n)
{
  double x = 2 * 3;
  x = x * 3;
 
  if (n > 0) {
    recursion(n/2);
    recursion(n/2);
  }
}
(2^(log_2(n)+1)-1)*10
Again the first part is number of function calls, the second part is cycles per call

3.
void recursion(int n)
{
  double x = 2 * 3;
  x = x * 3;
 
  if (n > 0) {
    recursion(n/2);
    recursion(n/2);
    recursion(n/2);
  }
}
(3^(log_2(n)+1)-1)/2*13
log base 2 because n/2 and 3 is the branching factor, about 13 cycles per recursion

4.
void recursion(int n)
{
  double x = 2 * 3;
  x = x * 3;
 
  if (n > 0) {
    recursion(n/3);
    recursion(n/3);
    recursion(n/3);
    recursion(n/3);
  }
}
(4^(log_3(n)+1)-1)/3*15
geometric series is the number of function calls, and 15 cycles per call

5.
void recursion(int n)
{
  double x = 2 * 3;
  x = x * 3;
 
  if (n > 0) {
    recursion(n/2);
    recursion(n/3);
  }
}
(2^((log_2(n)+log_3(n))/2+1)-1)*10

6.
void recursion(int n)
{
  double x = 2 * 3;
  x = x * 3;
 
  if (n > 0) {
    recursion(n-1);
    recursion(n-1);
  }
}
(2^(n+2)-1)*10
about 10 cycles per iteration, and about 2^(n+2)-1 calls
